import java.awt.* ;

import acm.*;
import acm.program.ConsoleProgram;

public class Logic{
	
	private Color vide = Color.white;
	private BoardState boardState;
	private PrintBoard printBoard;
	
	public void init(BoardState boardState, PrintBoard printBoard){
		this.boardState = boardState;
		this.printBoard = printBoard;
	}
	
	public void setJeton(int y, int x){

		int ligne = Config.NB_LIGNES-1;

		// Colonne pleine ?
		if(boardState.obtenirCase(ligne, x) == vide){
			ligne = 0;
			//quelle est la case vide ou mettre le jeton ?
			for(int i = 0; i < Config.NB_LIGNES; i++){
				if(boardState.obtenirCase(i, x) != vide){
					ligne++;
				}
				else{
					break;
				}
			}

			//remplire la case :
			boardState.definirLaCase(ligne, x);
			printBoard.update();
			check(ligne, x);
		}
	}
	
	public int compte(int ligne, int colonne, int dirL, int dirC){
		int compteur = 0;
		int x = colonne;
		int y = ligne;
		while(boardState.obtenirCase(ligne, colonne) == boardState.obtenirCase(y+dirL, x+dirC) && x < Config.NB_COLONNES && y < Config.NB_LIGNES && boardState.obtenirCase(ligne, colonne) != vide){
				compteur++;
				x = x + dirC;
				y = y + dirL;
				if(compteur == 3){
					break;
				}
		}
		return compteur;
	}
	
	public void check(int y, int x){
			
		 																			//COLONNE
		if(y > 2){																					
			System.out.println("COLONNE");
			if(compte(y, x, -1, 0) >= 3){
				printBoard.finDuJeu();
			}
		}
		
																					//LIGNE
		for(int i = 0; i < Config.NB_COLONNES-3; i++){												
			if(boardState.obtenirCase(y, i) == boardState.obtenirJActuelle()){
				if(compte(y, i, 0, +1) >= 3){
					printBoard.finDuJeu();
					break;
				}
			}
		}
		
																					//DIAGONALES HAUT 										
		int newX = x-y;
		int newY = y-x;
		if(newX < 0){
			newX = 0;
		}
		if(newY < 0){
			newY = 0;
		}

		while(newX < Config.NB_COLONNES-3 && newY < Config.NB_LIGNES-3){
			if(compte(newY, newX, 1, 1) >= 3){
				printBoard.finDuJeu();
			}
			newX++;
			newY++;
		}
		
																					//DIAGONALES BAS
		
		newX = x+y;
		newY = y-Config.NB_COLONNES+1+x;
		if(newX > Config.NB_COLONNES-1){
			newX = Config.NB_COLONNES-1;
		}
		if(newY < 0){
			newY = 0;
		}

		while(newX > 2 && newY < Config.NB_LIGNES-3){
			if(compte(newY, newX, 1, -1) >= 3){
				printBoard.finDuJeu();
			}
			newX--;
			newY++;
		}
		
		//Est-ce que la grille est rempli ?
		int colonnesPleines = 0;
		int colonne = 0;
		while(boardState.obtenirCase(Config.NB_LIGNES-1, colonne) != vide){
			colonnesPleines++;
			colonne++;
			System.out.println("ColonnePleines = "+colonnesPleines);
			if(colonne >= Config.NB_COLONNES){
				break;
			}
		}
		if(colonnesPleines == Config.NB_COLONNES){
			printBoard.sansGagnant();
		}
		
		//DÃ©finition du joueur actuelle
		if(boardState.obtenirJActuelle() == Color.yellow){
			boardState.definirJActuelle(Color.red);
		}
		else{
			boardState.definirJActuelle(Color.yellow);
		}
	}		
	
}
